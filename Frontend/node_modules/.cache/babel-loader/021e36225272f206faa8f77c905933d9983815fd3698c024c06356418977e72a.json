{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useCart } from '../context/CartContext';\n// import { useNavigate } from 'react-router-dom';\n\n// import axios from 'axios';\n\n// const Cart = () => {\n//   const { cartItems, removeFromCart, updateQuantity, clearCart } = useCart();\n//   const [promoCode, setPromoCode] = useState('');\n//   const [discount, setDiscount] = useState(0);\n//   const [promoError, setPromoError] = useState('');\n//   const [cardNumber, setCardNumber] = useState('');\n//   const [expiry, setExpiry] = useState('');\n//   const [cvv, setCvv] = useState('');\n//   const [cardHolder, setCardHolder] = useState('');\n//   const [paymentError, setPaymentError] = useState('');\n//   const [orderId, setOrderId] = useState(null); // Track order ID here\n//   const navigate = useNavigate();\n\n//   if (!cartItems || cartItems.length === 0) {\n//     return (\n//       <div className=\"flex justify-center items-center h-64\">\n//         <p className=\"text-xl text-red-500\">Your cart is empty!</p>\n//       </div>\n//     );\n//   }\n\n//   const total = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);\n//   const discountedTotal = total - (total * (discount / 100));\n\n//   const handlePromoCodeSubmit = () => {\n//     const validPromoCodes = {\n//       \"SAVE10\": 10,\n//       \"SAVE20\": 20,\n//       \"FREESHIP\": 5\n//     };\n\n//     if (validPromoCodes[promoCode]) {\n//       setDiscount(validPromoCodes[promoCode]);\n//       setPromoError('');\n//     } else {\n//       setPromoError('Invalid promo code');\n//       setDiscount(0);\n//     }\n//   };\n\n//   // const handlePayment = () => {\n//   //   if (!cardNumber || !expiry || !cvv || !cardHolder) {\n//   //     setPaymentError(\"Please fill out all payment fields.\");\n//   //     return;\n//   //   }\n\n//   //   // Generate a fake order ID\n//   //   const generatedOrderId = Math.floor(Math.random() * 1000000);\n\n//   //   // Update order ID in state\n//   //   setOrderId(generatedOrderId);\n//   //   alert(\"Payment Successful! Your order has been placed.\");\n//   //   clearCart(); // Clear cart after payment\n//   //   setCardNumber('');\n//   //   setExpiry('');\n//   //   setCvv('');\n//   //   setCardHolder('');\n//   //   setPaymentError('');\n//   // };\n//   // In Cart.js, modify the handlePayment function:\n\n// // Modify the handlePayment function in Cart.js\n\n// const handlePayment = async () => {\n//   if (!cardNumber || !expiry || !cvv || !cardHolder) {\n//     setPaymentError(\"Please fill out all payment fields.\");\n//     return;\n//   }\n\n//   try {\n//     // Get user's token for authorization\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       navigate('/login');\n//       return;\n//     }\n\n//     // Create order items array from cart items\n//     const orderItems = cartItems.map(item => ({\n//       foodItem: item._id,\n//       quantity: item.quantity,\n//       price: item.price\n//     }));\n\n//     // Calculate total amount (with or without discount)\n//     const totalAmount = discount > 0 ? discountedTotal : total;\n\n//     // Assume the delivery address is the same as user's address\n//     // In a real app, you might want to confirm this or let them choose\n//     const deliveryAddress = {\n//       // You would get this from user profile or let them select during checkout\n//       houseNo: \"User's House No\",\n//       area: \"User's Area\",\n//       city: \"User's City\"\n//     };\n\n//     // Create the order\n//     await axios.post('http://localhost:3001/orders', {\n//       items: orderItems,\n//       totalAmount,\n//       deliveryAddress,\n//       paymentMethod: \"Credit Card\" // Or get this from a selection\n//     }, {\n//       headers: {\n//         Authorization: `Bearer ${token}`\n//       }\n//     });\n\n//     // Generate a fake order ID\n//     const generatedOrderId = Math.floor(Math.random() * 1000000);\n\n//     // Update order ID in state\n//     setOrderId(generatedOrderId);\n//     alert(\"Payment Successful! Your order has been placed.\");\n//     clearCart(); // Clear cart after payment\n\n//     // Reset payment form\n//     setCardNumber('');\n//     setExpiry('');\n//     setCvv('');\n//     setCardHolder('');\n//     setPaymentError('');\n\n//     // Navigate to order history page to see the new order\n//     navigate('/orders');\n//   } catch (error) {\n//     console.error('Error placing order:', error);\n//     setPaymentError('Error processing payment. Please try again.');\n//   }\n// };\n//   return (\n//     <div className=\"p-6\">\n//       <h2 className=\"text-3xl font-bold mb-4\">Your Cart</h2>\n\n//       <div>\n//         {cartItems.map((item) => (\n//           <div key={item._id} className=\"flex justify-between items-center mb-4 bg-gray-800 p-4 rounded-lg\">\n//             <div className=\"flex items-center\">\n//               <img\n//                 src={item.image || 'https://via.placeholder.com/150'}\n//                 alt={item.name}\n//                 className=\"w-16 h-16 object-cover rounded-md\"\n//               />\n//               <div className=\"ml-4\">\n//                 <h3 className=\"text-lg font-semibold text-teal-400\">{item.name}</h3>\n//                 <p className=\"text-sm text-gray-300\">{item.description}</p>\n//               </div>\n//             </div>\n//             <div className=\"flex items-center gap-4\">\n//               <button\n//                 onClick={() => updateQuantity(item._id, 'decrement')}\n//                 className=\"px-2 py-1 bg-teal-600 text-white rounded-full\"\n//               >\n//                 -\n//               </button>\n//               <span className=\"text-xl font-semibold text-white\">{item.quantity}</span>\n//               <button\n//                 onClick={() => updateQuantity(item._id, 'increment')}\n//                 className=\"px-2 py-1 bg-teal-600 text-white rounded-full\"\n//               >\n//                 +\n//               </button>\n//               <span className=\"text-xl\">${(item.price * item.quantity).toFixed(2)}</span>\n//               <button\n//                 onClick={() => removeFromCart(item._id)}\n//                 className=\"px-4 py-2 bg-red-600 text-white rounded-full\"\n//               >\n//                 Remove\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <div className=\"mt-6\">\n//         <label htmlFor=\"promoCode\" className=\"text-lg font-semibold\">Have a promo code?</label>\n//         <div className=\"flex items-center gap-2 mt-2\">\n//           <input\n//             type=\"text\"\n//             id=\"promoCode\"\n//             value={promoCode}\n//             onChange={(e) => setPromoCode(e.target.value)}\n//             className=\"p-2 rounded-lg bg-gray-700 text-white\"\n//             placeholder=\"Enter promo code\"\n//           />\n//           <button\n//             onClick={handlePromoCodeSubmit}\n//             className=\"px-4 py-2 bg-teal-600 text-white rounded-full\"\n//           >\n//             Apply\n//           </button>\n//         </div>\n//         {promoError && <p className=\"text-red-500 mt-2\">{promoError}</p>}\n//       </div>\n\n//       <div className=\"flex justify-between items-center mt-4\">\n//         <p className=\"text-xl font-bold\">Total: ${total.toFixed(2)}</p>\n//         {discount > 0 && (\n//           <p className=\"text-lg text-green-500\">Discount: -${(total * (discount / 100)).toFixed(2)}</p>\n//         )}\n//       </div>\n//       <div className=\"flex justify-between items-center mt-4\">\n//         <p className=\"text-xl font-bold\">Total After Discount: ${discountedTotal.toFixed(2)}</p>\n//       </div>\n\n//       {/* Payment Section */}\n//       <div className=\"mt-8 p-6 bg-gray-900 rounded-lg\">\n//         <h2 className=\"text-2xl font-bold mb-4 text-white\">Payment Details</h2>\n\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Card Number\"\n//             className=\"p-2 rounded bg-gray-700 text-white\"\n//             value={cardNumber}\n//             onChange={(e) => setCardNumber(e.target.value)}\n//           />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Expiry Date (MM/YY)\"\n//             className=\"p-2 rounded bg-gray-700 text-white\"\n//             value={expiry}\n//             onChange={(e) => setExpiry(e.target.value)}\n//           />\n//           <input\n//             type=\"text\"\n//             placeholder=\"CVV\"\n//             className=\"p-2 rounded bg-gray-700 text-white\"\n//             value={cvv}\n//             onChange={(e) => setCvv(e.target.value)}\n//           />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Cardholder Name\"\n//             className=\"p-2 rounded bg-gray-700 text-white\"\n//             value={cardHolder}\n//             onChange={(e) => setCardHolder(e.target.value)}\n//           />\n//         </div>\n\n//         {paymentError && (\n//           <p className=\"text-red-500 mt-2\">{paymentError}</p>\n//         )}\n\n//         <button\n//           onClick={handlePayment}\n//           className=\"mt-4 px-6 py-2 bg-green-600 text-white rounded-full\"\n//         >\n//           Place Order\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Cart;","map":{"version":3,"names":[],"sources":["E:/11TH/CSE470 project/yasin/food_delivery_by_mern/food_delivery_by_mern/Frontend/src/pages/Cart.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useCart } from '../context/CartContext';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n\r\n// import axios from 'axios';\r\n\r\n// const Cart = () => {\r\n//   const { cartItems, removeFromCart, updateQuantity, clearCart } = useCart();\r\n//   const [promoCode, setPromoCode] = useState('');\r\n//   const [discount, setDiscount] = useState(0);\r\n//   const [promoError, setPromoError] = useState('');\r\n//   const [cardNumber, setCardNumber] = useState('');\r\n//   const [expiry, setExpiry] = useState('');\r\n//   const [cvv, setCvv] = useState('');\r\n//   const [cardHolder, setCardHolder] = useState('');\r\n//   const [paymentError, setPaymentError] = useState('');\r\n//   const [orderId, setOrderId] = useState(null); // Track order ID here\r\n//   const navigate = useNavigate();\r\n\r\n//   if (!cartItems || cartItems.length === 0) {\r\n//     return (\r\n//       <div className=\"flex justify-center items-center h-64\">\r\n//         <p className=\"text-xl text-red-500\">Your cart is empty!</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const total = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);\r\n//   const discountedTotal = total - (total * (discount / 100));\r\n\r\n//   const handlePromoCodeSubmit = () => {\r\n//     const validPromoCodes = {\r\n//       \"SAVE10\": 10,\r\n//       \"SAVE20\": 20,\r\n//       \"FREESHIP\": 5\r\n//     };\r\n\r\n//     if (validPromoCodes[promoCode]) {\r\n//       setDiscount(validPromoCodes[promoCode]);\r\n//       setPromoError('');\r\n//     } else {\r\n//       setPromoError('Invalid promo code');\r\n//       setDiscount(0);\r\n//     }\r\n//   };\r\n\r\n//   // const handlePayment = () => {\r\n//   //   if (!cardNumber || !expiry || !cvv || !cardHolder) {\r\n//   //     setPaymentError(\"Please fill out all payment fields.\");\r\n//   //     return;\r\n//   //   }\r\n\r\n//   //   // Generate a fake order ID\r\n//   //   const generatedOrderId = Math.floor(Math.random() * 1000000);\r\n\r\n//   //   // Update order ID in state\r\n//   //   setOrderId(generatedOrderId);\r\n//   //   alert(\"Payment Successful! Your order has been placed.\");\r\n//   //   clearCart(); // Clear cart after payment\r\n//   //   setCardNumber('');\r\n//   //   setExpiry('');\r\n//   //   setCvv('');\r\n//   //   setCardHolder('');\r\n//   //   setPaymentError('');\r\n//   // };\r\n//   // In Cart.js, modify the handlePayment function:\r\n\r\n// // Modify the handlePayment function in Cart.js\r\n\r\n// const handlePayment = async () => {\r\n//   if (!cardNumber || !expiry || !cvv || !cardHolder) {\r\n//     setPaymentError(\"Please fill out all payment fields.\");\r\n//     return;\r\n//   }\r\n\r\n//   try {\r\n//     // Get user's token for authorization\r\n//     const token = localStorage.getItem('token');\r\n//     if (!token) {\r\n//       navigate('/login');\r\n//       return;\r\n//     }\r\n\r\n//     // Create order items array from cart items\r\n//     const orderItems = cartItems.map(item => ({\r\n//       foodItem: item._id,\r\n//       quantity: item.quantity,\r\n//       price: item.price\r\n//     }));\r\n    \r\n//     // Calculate total amount (with or without discount)\r\n//     const totalAmount = discount > 0 ? discountedTotal : total;\r\n\r\n//     // Assume the delivery address is the same as user's address\r\n//     // In a real app, you might want to confirm this or let them choose\r\n//     const deliveryAddress = {\r\n//       // You would get this from user profile or let them select during checkout\r\n//       houseNo: \"User's House No\",\r\n//       area: \"User's Area\",\r\n//       city: \"User's City\"\r\n//     };\r\n\r\n//     // Create the order\r\n//     await axios.post('http://localhost:3001/orders', {\r\n//       items: orderItems,\r\n//       totalAmount,\r\n//       deliveryAddress,\r\n//       paymentMethod: \"Credit Card\" // Or get this from a selection\r\n//     }, {\r\n//       headers: {\r\n//         Authorization: `Bearer ${token}`\r\n//       }\r\n//     });\r\n\r\n//     // Generate a fake order ID\r\n//     const generatedOrderId = Math.floor(Math.random() * 1000000);\r\n\r\n//     // Update order ID in state\r\n//     setOrderId(generatedOrderId);\r\n//     alert(\"Payment Successful! Your order has been placed.\");\r\n//     clearCart(); // Clear cart after payment\r\n    \r\n//     // Reset payment form\r\n//     setCardNumber('');\r\n//     setExpiry('');\r\n//     setCvv('');\r\n//     setCardHolder('');\r\n//     setPaymentError('');\r\n    \r\n//     // Navigate to order history page to see the new order\r\n//     navigate('/orders');\r\n//   } catch (error) {\r\n//     console.error('Error placing order:', error);\r\n//     setPaymentError('Error processing payment. Please try again.');\r\n//   }\r\n// };\r\n//   return (\r\n//     <div className=\"p-6\">\r\n//       <h2 className=\"text-3xl font-bold mb-4\">Your Cart</h2>\r\n\r\n//       <div>\r\n//         {cartItems.map((item) => (\r\n//           <div key={item._id} className=\"flex justify-between items-center mb-4 bg-gray-800 p-4 rounded-lg\">\r\n//             <div className=\"flex items-center\">\r\n//               <img\r\n//                 src={item.image || 'https://via.placeholder.com/150'}\r\n//                 alt={item.name}\r\n//                 className=\"w-16 h-16 object-cover rounded-md\"\r\n//               />\r\n//               <div className=\"ml-4\">\r\n//                 <h3 className=\"text-lg font-semibold text-teal-400\">{item.name}</h3>\r\n//                 <p className=\"text-sm text-gray-300\">{item.description}</p>\r\n//               </div>\r\n//             </div>\r\n//             <div className=\"flex items-center gap-4\">\r\n//               <button\r\n//                 onClick={() => updateQuantity(item._id, 'decrement')}\r\n//                 className=\"px-2 py-1 bg-teal-600 text-white rounded-full\"\r\n//               >\r\n//                 -\r\n//               </button>\r\n//               <span className=\"text-xl font-semibold text-white\">{item.quantity}</span>\r\n//               <button\r\n//                 onClick={() => updateQuantity(item._id, 'increment')}\r\n//                 className=\"px-2 py-1 bg-teal-600 text-white rounded-full\"\r\n//               >\r\n//                 +\r\n//               </button>\r\n//               <span className=\"text-xl\">${(item.price * item.quantity).toFixed(2)}</span>\r\n//               <button\r\n//                 onClick={() => removeFromCart(item._id)}\r\n//                 className=\"px-4 py-2 bg-red-600 text-white rounded-full\"\r\n//               >\r\n//                 Remove\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n\r\n//       <div className=\"mt-6\">\r\n//         <label htmlFor=\"promoCode\" className=\"text-lg font-semibold\">Have a promo code?</label>\r\n//         <div className=\"flex items-center gap-2 mt-2\">\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"promoCode\"\r\n//             value={promoCode}\r\n//             onChange={(e) => setPromoCode(e.target.value)}\r\n//             className=\"p-2 rounded-lg bg-gray-700 text-white\"\r\n//             placeholder=\"Enter promo code\"\r\n//           />\r\n//           <button\r\n//             onClick={handlePromoCodeSubmit}\r\n//             className=\"px-4 py-2 bg-teal-600 text-white rounded-full\"\r\n//           >\r\n//             Apply\r\n//           </button>\r\n//         </div>\r\n//         {promoError && <p className=\"text-red-500 mt-2\">{promoError}</p>}\r\n//       </div>\r\n\r\n//       <div className=\"flex justify-between items-center mt-4\">\r\n//         <p className=\"text-xl font-bold\">Total: ${total.toFixed(2)}</p>\r\n//         {discount > 0 && (\r\n//           <p className=\"text-lg text-green-500\">Discount: -${(total * (discount / 100)).toFixed(2)}</p>\r\n//         )}\r\n//       </div>\r\n//       <div className=\"flex justify-between items-center mt-4\">\r\n//         <p className=\"text-xl font-bold\">Total After Discount: ${discountedTotal.toFixed(2)}</p>\r\n//       </div>\r\n\r\n//       {/* Payment Section */}\r\n//       <div className=\"mt-8 p-6 bg-gray-900 rounded-lg\">\r\n//         <h2 className=\"text-2xl font-bold mb-4 text-white\">Payment Details</h2>\r\n\r\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Card Number\"\r\n//             className=\"p-2 rounded bg-gray-700 text-white\"\r\n//             value={cardNumber}\r\n//             onChange={(e) => setCardNumber(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Expiry Date (MM/YY)\"\r\n//             className=\"p-2 rounded bg-gray-700 text-white\"\r\n//             value={expiry}\r\n//             onChange={(e) => setExpiry(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"CVV\"\r\n//             className=\"p-2 rounded bg-gray-700 text-white\"\r\n//             value={cvv}\r\n//             onChange={(e) => setCvv(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Cardholder Name\"\r\n//             className=\"p-2 rounded bg-gray-700 text-white\"\r\n//             value={cardHolder}\r\n//             onChange={(e) => setCardHolder(e.target.value)}\r\n//           />\r\n//         </div>\r\n\r\n//         {paymentError && (\r\n//           <p className=\"text-red-500 mt-2\">{paymentError}</p>\r\n//         )}\r\n\r\n//         <button\r\n//           onClick={handlePayment}\r\n//           className=\"mt-4 px-6 py-2 bg-green-600 text-white rounded-full\"\r\n//         >\r\n//           Place Order\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Cart;\r\n"],"mappings":"AAAA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}